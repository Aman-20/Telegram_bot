// telegram-bot.js
import express from 'express';
import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();
const PORT = process.env.PORT || 3000;

const app = express();

app.set("view engine", "ejs");

app.get("/", (req, res) => res.render("home"));
app.get("/privacy", (req, res) => res.render("privacy"));
app.get("/terms", (req, res) => res.render("terms"));
app.listen(PORT, () => console.log(`‚úÖ Web server running on port ${PORT}`));

// --- Load API keys from .env ---
const TELEGRAM_TOKEN = process.env.TELEGRAM_TOKEN;
const GEMINI_API_KEY = process.env.GEMINI_API_KEY;

// --- Initialize Telegram Bot ---
const bot = new TelegramBot(TELEGRAM_TOKEN, { polling: true });

// --- Register Commands with Telegram ---
bot.setMyCommands([
    { command: "start", description: "ü§ñAbout the bot" },
    { command: "help", description: "üìùList of commands" },
    { command: "account", description: "üë§ My account info" },
    { command: "language", description: "üåê Change language" },
    { command: "clearchat", description: "üßπ Clear chat history" },
    { command: "about", description: "üëÄAbout this bot" },
    { command: "terms", description: "üìú Terms of service" },
    
  ]);
  

// --- Initialize Gemini ---
const genAI = new GoogleGenerativeAI(GEMINI_API_KEY);
const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

// Define supported languages
const LANGUAGES = {
    en: "üá¨üáß English",
    hi: "üáÆüá≥ Hindi",
    es: "üá™üá∏ Spanish",
    fr: "üá´üá∑ French",
    de: "üá©üá™ German",
    ja: "üáØüáµ Japanese",
    ru: "üá∑üá∫ Russian",
    ar: "üá∏üá¶ Arabic",
};
  

// --- Commands ---
bot.onText(/\/start/, (msg) => {
  bot.sendMessage(msg.chat.id, `üëã Hi ${msg.from.first_name}!
I am your AI assistant powered by Gemini.
Type any question and I‚Äôll try to answer.`);
});

bot.onText(/\/help/, (msg) => {
  bot.sendMessage(msg.chat.id, `üìå Available commands:
/start - Start the bot
/help - Show help
/about - About this bot
/clearchat - Clear chat history
/terms - Terms of services
/account - My account info
/language - Change language`);
});

bot.onText(/\/about/, (msg) => {
  bot.sendMessage(msg.chat.id, `ü§ñ This bot is built with:
- Telegram Bot API
- Google Gemini AI
- Node.js`);
});
  
bot.onText(/\/clearchat/, (msg) => {
    bot.sendMessage(msg.chat.id, "üßπ Your chat history has been cleared. Start fresh anytime!");
});

bot.onText(/\/terms/, (msg) => {
    const chatId = msg.chat.id;
  
    const terms = `
  üìú *Terms of Service*
  
  1. This bot is provided for educational and personal use only.  
  2. Do not use this bot to share harmful, illegal, or inappropriate content.  
  3. The bot may store limited usage data to improve responses and enforce usage limits.  
  4. Responses are generated by AI (Gemini API) and may not always be accurate.  
  5. By using this bot, you agree to these terms.
  `;
  
    bot.sendMessage(chatId, terms, {
      parse_mode: "Markdown",
      reply_markup: {
        inline_keyboard: [
          [
            { text: "üìÑ Full Terms of Service", url: "https://yourwebsite.com/terms" },
            { text: "üîí Privacy Policy", url: "https://yourwebsite.com/privacy" }
          ]
        ]
      }
    });
  });
  
  
const DEFAULT_LIMIT = 20; // requests per day
const userData = {}; // { chatId: { requests: 0, limit: 20, lastReset: Date } }

function resetUserLimits() {
    const now = new Date();
  
    for (const chatId in userData) {
      const user = userData[chatId];
      const lastReset = user.lastReset || new Date(0);
      
      // If last reset was before today, reset requests
      if (lastReset.toDateString() !== now.toDateString()) {
        user.requests = 0;
        user.lastReset = now;
      }
    }
  }
  
// Run reset every hour (or any interval)
setInterval(resetUserLimits, 60 * 60 * 1000); // every 1 hour

bot.onText(/\/account/, (msg) => {
    const chatId = msg.chat.id;
  
    if (!userData[chatId]) {
      userData[chatId] = { requests: 0, limit: DEFAULT_LIMIT, lastReset: new Date() };
    }
  
    const user = userData[chatId];
    const remaining = user.limit - user.requests;
  
    bot.sendMessage(chatId, `
  üë§ *My Account*
  
  - Requests used today: ${user.requests}
  - Requests remaining: ${remaining}
  - Daily limit: ${user.limit}
  
  üí° Your requests reset every 24 hours.
    `, { parse_mode: "Markdown" });
  });
  

bot.onText(/\/language/, (msg) => {
    const chatId = msg.chat.id;
  
    // Convert LANGUAGES object to inline keyboard (2 buttons per row)
    const buttons = Object.entries(LANGUAGES).map(([code, name]) => {
      return { text: name, callback_data: `lang_${code}` };
    });
  
    // Split into rows of 2 buttons
    const keyboard = [];
    for (let i = 0; i < buttons.length; i += 2) {
      keyboard.push(buttons.slice(i, i + 2));
    }
  
    bot.sendMessage(chatId, "üåê Choose your language:", {
      reply_markup: { inline_keyboard: keyboard }
    });
});

const userLanguages = {}; // store user language in-memory

bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;

  if (query.data.startsWith("lang_")) {
    const lang = query.data.replace("lang_", "");
    userLanguages[chatId] = lang;

    bot.sendMessage(chatId, `‚úÖ Language changed to: ${LANGUAGES[lang]}`);
    bot.answerCallbackQuery(query.id);
  }
});

  


// --- Chat with Gemini ---
bot.on("message", async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;

  if (!text || text.startsWith("/")) return; // ignore non-text or commands

  // Initialize user data if first time
  if (!userData[chatId]) {
    userData[chatId] = { requests: 0, limit: DEFAULT_LIMIT, lastReset: new Date() };
  }

  const user = userData[chatId];

  // Reset daily limit if lastReset is not today
  if (user.lastReset.toDateString() !== new Date().toDateString()) {
    user.requests = 0;
    user.lastReset = new Date();
  }

  // Check if user exceeded daily limit
  if (user.requests >= user.limit) {
    bot.sendMessage(
      chatId,
      `‚ö†Ô∏è You have reached your daily limit (${user.limit} requests). Your quota will reset tomorrow.`
    );
    return;
  }

  const lang = userLanguages[chatId] || "en"; // default language

  try {
    bot.sendChatAction(chatId, "typing");

    // Ask Gemini and pass prompt with language
    const result = await model.generateContent(
      `Answer in ${LANGUAGES[lang]} (${lang}): ${text}`
    );
    const reply = result.response.text();

    bot.sendMessage(chatId, reply);

    // Increment user's request count
    user.requests += 1;
  } catch (err) {
    console.error(err);
    bot.sendMessage(chatId, "‚ö†Ô∏è Error: Could not process your request.");
  }
});

  
